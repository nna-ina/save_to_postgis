# -*- coding: utf-8 -*-
"""
/***************************************************************************
 SavetoPostGIS
                                 A QGIS plugin
 This plugin is for upload data to PostgreSQL database from layer.
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2023-05-24
        git sha              : $Format:%H$
        copyright            : (C) 2023 by BIG - UNGEGN
        email                : nna-ina@big.go.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .save_to_postgis_dialog import SavetoPostGISDialog
import os.path

from qgis.core import QgsProject, Qgis, QgsMapLayerType, QgsVectorLayer

import subprocess
import sys
import psycopg2

class SavetoPostGIS:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'SavetoPostGIS_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Toponyms Management')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None

    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('SavetoPostGIS', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/save_to_postgis/icon.png'
        self.add_action(
            icon_path,
            text=self.tr(u'Save to PostGIS'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr(u'&Toponyms Management'),
                action)
            self.iface.removeToolBarIcon(action)

    def pg_connection(self):
        pg_connection = psycopg2.connect(
            host=self.dlg.lineEdit.text(),
            port=self.dlg.lineEdit_2.text(),
            dbname=self.dlg.lineEdit_3.text(),
            user=self.dlg.lineEdit_4.text(),
            password=self.dlg.lineEdit_5.text()
        )
        return pg_connection

    def check_columns(self, layer_data_source, pg_data_source):
        # Open layer
        layer = QgsVectorLayer(layer_data_source, "Check Mandatory Columns", "ogr")

        # PGConnect
        pg_conn = self.pg_connection()
        pg_mandatory_cur = pg_conn.cursor()
        pg_optional_cur = pg_conn.cursor()

        # Get columns from layer
        layer_columns = [field.name() for field in layer.fields()]
        # Get columns from PG
        mandatory_columns_sql = f"SELECT column_name FROM information_schema.columns WHERE table_name = '{pg_data_source}' AND is_nullable = 'NO'" 
        mandatory_execute = pg_mandatory_cur.execute(mandatory_columns_sql)
        pg_mandatory_columns = [column[0] for column in pg_mandatory_cur.fetchall()]
        
        if 'id_toponym' in pg_mandatory_columns:
            pg_mandatory_columns.remove('id_toponym')
        pg_mandatory_columns.remove('geom')
        
        optional_columns_sql = f"SELECT column_name FROM information_schema.columns WHERE table_name = '{pg_data_source}' AND is_nullable = 'YES'"
        optional_execute = pg_optional_cur.execute(optional_columns_sql)
        pg_optional_columns = [column[0] for column in pg_optional_cur.fetchall()]

        # Check for missing columns
        missing_mandatory_columns = set(pg_mandatory_columns) - set(layer_columns)
        missing_optional_columns = set(pg_optional_columns) - set(layer_columns)

        if missing_mandatory_columns and missing_optional_columns:
            self.iface.messageBar().pushMessage(
                "Info", f"The following optional columns are missing in the layer data : {', '.join(missing_optional_columns)}.",
            level=Qgis.Info, duration=5)
            raise Exception(f"The following mandatory columns are missing in the layer data : {', '.join(missing_mandatory_columns)}.")
        elif missing_mandatory_columns:
            raise Exception(f"The following mandatory columns are missing in the layer data : {', '.join(missing_mandatory_columns)}.")
        elif missing_optional_columns:
            self.iface.messageBar().pushMessage(
                "Info", f"The following optional columns are missing in the layer data : {', '.join(missing_optional_columns)}.",
            level=Qgis.Info, duration=5)
        else:
            pass
            
        layer_dataset = None
        layer = None

        pg_mandatory_cur.close()
        pg_optional_cur.close()
        pg_conn.close()

    def check_type(self, layer_data_source, pg_data_source):
        layer = QgsVectorLayer(layer_data_source, "Check Data Type Mandatory", "ogr")

        # PGConnect
        pg_conn = self.pg_connection()
        pg_mandatory_cur = pg_conn.cursor()
        
        # Get columns from PG
        mandatory_columns_sql = f"SELECT column_name, data_type FROM information_schema.columns WHERE table_name = '{pg_data_source}' AND is_nullable = 'NO' AND column_name NOT IN ('id_toponym', 'geom')"
        mandatory_execute = pg_mandatory_cur.execute(mandatory_columns_sql)
        fetchall = pg_mandatory_cur.fetchall()
        pg_mandatory_columns = [column[0] for column in fetchall]
        pg_data_type = [column[1] for column in fetchall]
        replace_varchar = [string.replace('character varying', 'String') for string in pg_data_type]
        replace_double_precision = [string.replace('double precision', 'Real') for string in replace_varchar]
        replace_date = [date.replace('date', 'Date') for date in replace_double_precision]

        pg_type_dict = dict(zip(pg_mandatory_columns, replace_date))

        data_field_names = []
        data_field_types = []

        for field in pg_mandatory_columns:
            field_index = layer.fields().indexFromName(field)
            detect_fields = layer.fields().field(field_index)
            data_field_names.append(detect_fields.name())
            data_field_types.append(detect_fields.typeName())
        
        data_type_dict = dict(zip(data_field_names, data_field_types))

        data_type_checker = []

        for key in pg_type_dict:
            if key in data_type_dict:
                if pg_type_dict[key] == data_type_dict[key]:
                    pass
                else:
                    data_type_checker.append(key)
        
        different_type = ', '.join(data_type_checker)
        
        if len(data_type_checker) == 0:
            pass
        else:
            raise Exception(f"Please check the following mandatory columns data type : {different_type}. The data types are different with the database!")

        pg_mandatory_cur.close()
        pg_conn.close()

    def check_null(self, layer_data_source, pg_data_source):
        layer = QgsVectorLayer(layer_data_source, "Check Null Mandatory", "ogr")

        # PGConnect
        pg_conn = self.pg_connection()
        pg_mandatory_cur = pg_conn.cursor()
        
        # Get columns from PG
        mandatory_columns_sql = f"SELECT column_name FROM information_schema.columns WHERE table_name = '{pg_data_source}' AND is_nullable = 'NO'" 
        mandatory_execute = pg_mandatory_cur.execute(mandatory_columns_sql)
        pg_mandatory_columns = [column[0] for column in pg_mandatory_cur.fetchall()]
        pg_mandatory_columns.remove('id_toponym')
        pg_mandatory_columns.remove('geom')

        mandatory_is_null = {key: False for key in pg_mandatory_columns}

        for column_name in pg_mandatory_columns:
            check_null = [f[column_name] for f in layer.getFeatures()]
            if None in check_null or len(check_null) == 0:
                mandatory_is_null[column_name] = True

        isnull_column = ', '.join([key for key, value in mandatory_is_null.items() if value == True])

        if any(value for value in mandatory_is_null.values()):
            raise Exception(f"Please check the following mandatory columns value : {isnull_column}. There are NULL values!")
        else:
            pass

        pg_mandatory_cur.close()
        pg_conn.close()

    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback, so that it will only load when the plugin is started
        if self.first_start == True:
            self.first_start = False
            self.dlg = SavetoPostGISDialog()

        # Fetch the currently loaded layers
        layers = QgsProject.instance().mapLayers().values()
        # Clear the contents of the comboBox from previous runs
        self.dlg.comboBox.clear()
        # Populate the comboBox with names of all the loaded layers
        self.dlg.comboBox.addItems(list(set([layer.name() for layer in layers if layer.type() == QgsMapLayerType.VectorLayer])))
        
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            host = self.dlg.lineEdit.text()
            port = self.dlg.lineEdit_2.text()
            dbname = self.dlg.lineEdit_3.text()
            user = self.dlg.lineEdit_4.text()
            password = self.dlg.lineEdit_5.text()

            db_credential = f"host={host} port={port} dbname={dbname} user={user} password={password}"

            selected_layer_name = self.dlg.comboBox.currentText()
            selected_layer = QgsProject.instance().mapLayersByName(selected_layer_name)[0]
            layer_data_source = selected_layer.dataProvider().dataSourceUri()
            layer_data_source = layer_data_source.split("|")[0]

            table = self.dlg.lineEdit_6.text()

            # columns_to_check = ['id_toponym', 'geom_type', 'fclass', 'ftype', 'lat', 'long', 'remark', 'country', 'prov_state', 'name', 'var_name', 'prev_name', 'survey_date', 'photo_1', 'photo_2', 'rec', 'hist_name', 'lang_ori', 'mean_name', 'surveyor']
            # Check columns, type and values
            self.check_columns(layer_data_source, table)
            self.check_type(layer_data_source, table)
            self.check_null(layer_data_source, table)

            command = 'ogr2ogr -f "PostgreSQL" PG:"' + db_credential + '" -nln "' + table + '" -nlt PROMOTE_TO_MULTI -append -skipfailures "{0}"'
            command = command.format(layer_data_source)

            # Run the command as a subprocess
            process = subprocess.Popen(command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE)

            stdout, stderr = process.communicate()

            # Check for any errors
            if process.returncode == 0:
                self.iface.messageBar().pushMessage(
                    "Success", "Your data has been successfully saved in PostGIS!",
                level=Qgis.Success, duration=5)
            else:
                self.iface.messageBar().pushMessage(
                    "Warning", "An error occurred: " + stderr.decode(),
                level=Qgis.Warning, duration=5)